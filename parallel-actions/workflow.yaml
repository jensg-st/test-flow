timeouts:
  interrupt: PT1M
  kill: PT1M
start:
  type: event
  state: ship-events
  event:
    type: testevent
functions:
- id: log-user-auth-console
  image: gerke74/dummy
  type: knative-workflow
- id: record-user-auth-relational
  image: gerke74/dummy
  type: knative-workflow
- id: record-user-auth-analytics
  image: gerke74/dummy
  type: knative-workflow
states:
- id: ship-events
  type: parallel
  mode: and
  log: data coming in jq(.testevent.data)
  actions:
  - function: log-user-auth-console
    input: 
      name: jq(.testevent.data.name1)
  - function: record-user-auth-relational
    input: 
      name: jq(.testevent.data.name2)
  - function: record-user-auth-analytics
    input: 
      name: jq(.testevent.data.name3)
  # each function can throw a different error
  # each error type can be handled differently
  catch: 
  - error: "com.greeting-input.error"
    transition: handle-error
  - error: "name.too.old.school"
    transition: fire-event
  - error: "*"
    transition: something-else

- id: handle-error
  type: noop
  log: 'There was a name missing: jq(.error.msg)'
  transition: mark-error

- id: something-else
  type: noop
  log: 'No idea what happened: jq(.error)'
  transition: mark-error

# this is firing an event for another flow to pickup the 
# error and do something with it
- id: fire-event
  type: generateEvent
  event:
    type: error.event
    source: ship-event-workflow
    context: 
      code: jq(.error.msg)
      msg: jq(.error.code)
    data: 
      payload: jq(.testevent)
    datacontenttype: application/json
  transition: mark-error

# when errors are caught the workflow is in a successful state again
# if the workflow should be marked as failed again it can be done with
# the error state
- id: mark-error
  type: error
  error: jq(.)
  message: 'Missing or invalid value for required input.'
